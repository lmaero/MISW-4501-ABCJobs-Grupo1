version: "3.1"

services:
  authorizer:
    container_name: "authorizer"
    build: "./authorizer"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${AUTH_PORT}:${AUTH_PORT}
    env_file:
      - .env
    networks:
      - microservices

  candidate:
    container_name: "candidate"
    build: "./candidate"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${CANDIDATE_PORT}:${CANDIDATE_PORT}
    env_file:
      - .env
    networks:
      - microservices

  evaluator:
    container_name: "evaluator"
    build: "./evaluator"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${EVALUATOR_PORT}:${EVALUATOR_PORT}
    env_file:
      - .env
    networks:
      - microservices

  project:
    container_name: "project"
    build: "./project"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - ${PROJECT_PORT}:${PROJECT_PORT}
    env_file:
      - .env
    networks:
      - microservices

  postgres:
    container_name: "postgres"
    image: postgres:15.4-alpine3.18
    ports:
      - "5433:5433"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

networks:
  microservices:
    driver: bridge

volumes:
  postgres_data:
