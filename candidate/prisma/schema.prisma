// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum sections
enum ROLE {
  AI_PROGRAMMER
  ANDROID_DEVELOPER
  ARCHITECT
  BACKEND
  BLOCKCHAIN_DEVELOPER
  BUSINESS_ANALYST
  CLOUD_ARCHITECT
  CYBERSECURITY_ENGINEER
  DATA_ANALYST
  DATA_SCIENTIST
  DEVOPS
  FRONTEND
  FULLSTACK
  GRAPHIC_DESIGNER
  IOS_DEVELOPER
  IOT
  MOBILE_DEVELOPER
  PEN_TESTER
  PRODUCT_MANAGER
  QA
  SCRUM_MASTER
  SECURITY_ANALYST
  SOFTWARE_ENGINEER
  TECH_LEAD
  TESTER
  UX_UI_DESIGNER
}

enum TEST {
  TECHNICAL
  PSYCHOLOGICAL
}

enum EMPLOYMENT {
  APPRENTICESHIP
  CONTRACT
  FREELANCE
  FULL_TIME
  INTERNSHIP
  PART_TIME
  SEASONAL
  SELF_EMPLOYED
}

enum SIZE {
  BIG
  MEDIUM
  SMALL_BUSINESS
  STARTUP
}

enum GRADE {
  BACHELOR
  COLLEGE
  MASTER
  PHD
}

enum LOCATION {
  HYBRID
  ONSITE
  REMOTE
}

enum DIFFICULTY {
  EASY
  HARD
  MEDIUM
}

// Interfaces sections
model Education {
  id               Int             @id @default(autoincrement())
  school           String
  degree           String
  fieldOfStudy     String
  startDate        DateTime        @default(now())
  endDate          DateTime?
  grade            GRADE
  academicalData   AcademicalData? @relation(fields: [academicalDataId], references: [id])
  academicalDataId Int?
}

model Result {
  id                 Int         @id @default(autoincrement())
  technicalScore     Int
  psychologicalScore Int
  test               Test[]
  interview          Interview[]
}

model Address {
  id          Int          @id @default(autoincrement())
  street      String
  city        String
  country     String
  zipCode     String
  experiences Experience[]
  persons     Person[]
  companies   Company[]
}

model Certification {
  id                  Int             @id @default(autoincrement())
  name                String
  issuingOrganization String
  issueDate           DateTime
  expirationDate      DateTime
  credentialID        String
  credentialURL       String
  academicalData      AcademicalData? @relation(fields: [academicalDataId], references: [id])
  academicalDataId    Int?
}

model AcademicalData {
  id             Int             @id @default(autoincrement())
  educations     Education[]
  certifications Certification[]
  candidate      Candidate[]
}

model Question {
  id            Int        @id @default(autoincrement())
  statement     String
  correctAnswer String
  wrongAnswer   String[]
  difficulty    DIFFICULTY
  points        Int
  test          Test?      @relation(fields: [testId], references: [id])
  testId        Int?
}

model Experience {
  id             Int        @id @default(autoincrement())
  title          String
  employmentType EMPLOYMENT
  companyName    String
  location       Address    @relation(fields: [locationId], references: [id])
  locationId     Int
  locationType   LOCATION
  startDate      DateTime
  endDate        DateTime?
  role           ROLE
  activities     String[]
  workData       WorkData?  @relation(fields: [workDataId], references: [id])
  workDataId     Int?
}

model WorkProject {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime?
  workData    WorkData? @relation(fields: [workDataId], references: [id])
  workDataId  Int?
}

model WorkData {
  id          Int           @id @default(autoincrement())
  experiences Experience[]
  projects    WorkProject[]
  candidate   Candidate[]
}

model TechnicalData {
  id                  Int         @id @default(autoincrement())
  techSkills          String[]
  progammingLanguages String[]
  roles               ROLE[]
  yearOfExperience    Int
  candidate           Candidate[]
  project             Project[]
}

// Entities sections

model Company {
  id                Int       @id @default(autoincrement())
  name              String
  size              SIZE
  locations         Address[]
  preferredLanguage String
  businessSegments  String[]
  mainContact       Person    @relation(fields: [mainContactId], references: [id])
  mainContactId     Int
  projects          Project[]
}

model Project {
  id                  Int           @id @default(autoincrement())
  team                Person[]
  company             Company?      @relation(fields: [companyId], references: [id])
  companyId           Int?
  price               BigInt
  budget              BigInt
  deadline            DateTime
  description         String
  registeredWorkHours Float
  requiredProfile     TechnicalData @relation(fields: [technicalDataId], references: [id])
  stakeholders        String[]
  technicalDataId     Int
}

model Person {
  id                Int        @id @default(autoincrement())
  firstName         String
  lastName          String
  address           Address    @relation(fields: [addressId], references: [id])
  addressId         Int
  phoneNumber       String
  preferredLanguage String
  isAdministrator   Boolean
  test              Test?      @relation(fields: [testId], references: [id])
  testId            Int?
  candidate         Candidate?
  company           Company[]
  projects          Project?   @relation(fields: [projectId], references: [id])
  projectId         Int?
}

model Candidate {
  person           Person          @relation(fields: [personId], references: [id])
  personId         Int             @id
  email            String          @unique
  password         String
  token            String?
  country          String
  languages        String
  academicalData   AcademicalData? @relation(fields: [academicalDataId], references: [id])
  academicalDataId Int?
  technicalData    TechnicalData?  @relation(fields: [technicalDataId], references: [id])
  technicalDataId  Int?
  workData         WorkData?       @relation(fields: [workDataId], references: [id])
  workDataId       Int?
  isAvailable      Boolean
  softSkills       String
  Interview        Interview?      @relation(fields: [interviewId], references: [id])
  interviewId      Int?            @unique
}

model Interview {
  id            Int         @id @default(autoincrement())
  participants  Candidate[]
  scheduledDate DateTime
  result        Result      @relation(fields: [resultId], references: [id])
  resultId      Int
  tests         Test[]
}

model Test {
  id               Int        @id @default(autoincrement())
  type             TEST
  results          Result     @relation(fields: [resultId], references: [id])
  resultId         Int
  questions        Question[]
  isIndividualTest Boolean
  isFinished       Boolean
  wasSupplanted    Boolean
  minutesDuration  Int
  hasAuthorization Person[]
  interview        Interview  @relation(fields: [interviewId], references: [id])
  interviewId      Int        @unique
}
